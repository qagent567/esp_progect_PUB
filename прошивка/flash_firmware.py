#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—à–∏–≤–∫–∏ –Ω–∞ ESP32
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç COM-–ø–æ—Ä—Ç—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""

import sys
import os
import serial
import serial.tools.list_ports
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import subprocess
import threading

class ModernFlashFirmwareGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üåæ AgriSwarm - ESP32 Flasher")
        self.root.geometry("1200x700")  # –®–∏—Ä–æ–∫–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–≤—É—Ö –∫–æ–ª–æ–Ω–æ–∫
        self.root.resizable(True, True)  # –†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
        self.root.minsize(900, 550)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        self.root.configure(bg="#f8f9fa")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
        self.setup_style()

        # –ü—É—Ç—å –∫ firmware.bin –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –ø–∞–ø–∫–µ firmware/
        firmware_dir = os.path.join(os.path.dirname(__file__), "firmware")
        default_path_firmware = os.path.join(firmware_dir, "firmware.bin")
        default_path_root = os.path.join(os.path.dirname(__file__), "firmware.bin")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ firmware —Å —Ñ–∞–π–ª–∞–º–∏
        if os.path.exists(firmware_dir) and os.path.exists(default_path_firmware):
            self.firmware_path = default_path_firmware
            self.firmware_base_dir = firmware_dir  # –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
        elif os.path.exists(default_path_root):
            self.firmware_path = default_path_root
            self.firmware_base_dir = os.path.dirname(__file__)  # –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        else:
            self.firmware_path = ""
            self.firmware_base_dir = os.path.dirname(__file__)

        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö COM-–ø–æ—Ä—Ç–æ–≤
        self.com_ports = self.get_com_ports()

        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_flashing = False

        self.setup_ui()
        
    def setup_style(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –¥–ª—è ttk —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.style = ttk.Style()

        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.style.configure(
            "Modern.TButton",
            padding=10,
            relief="flat",
            background="#007bff",
            foreground="white",
            font=("Segoe UI", 10, "bold"),
            borderwidth=0
        )
        self.style.map(
            "Modern.TButton",
            background=[("active", "#0056b3"), ("!active", "#007bff")],
            foreground=[("active", "white")]
        )

        # –°—Ç–∏–ª—å –¥–ª—è —Ä–∞–º–æ–∫
        self.style.configure(
            "Card.TFrame",
            background="white",
            relief="flat",
            borderwidth=1
        )

        # –°—Ç–∏–ª—å –¥–ª—è –º–µ—Ç–æ–∫
        self.style.configure(
            "Title.TLabel",
            font=("Segoe UI", 16, "bold"),
            background="#f8f9fa",
            foreground="#212529"
        )

        self.style.configure(
            "Section.TLabel",
            font=("Segoe UI", 11, "bold"),
            background="white",
            foreground="#495057"
        )

        self.style.configure(
            "Status.TLabel",
            font=("Segoe UI", 9),
            background="#f8f9fa",
            foreground="#6c757d"
        )

        # –°—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        self.style.configure(
            "Horizontal.TProgressbar",
            background="#007bff",
            troughcolor="#e9ecef",
            borderwidth=0,
            lightcolor="#007bff",
            darkcolor="#007bff"
        )

    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –¥–≤—É–º—è –∫–æ–ª–æ–Ω–∫–∞–º–∏
        main_container = ttk.Frame(self.root)
        main_container.pack(fill="both", expand=True, padx=10, pady=10)

        # –õ–ï–í–ê–Ø –ö–û–õ–û–ù–ö–ê - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        left_frame = ttk.Frame(main_container, style="Card.TFrame")
        left_frame.pack(side="left", fill="both", expand=False, padx=(0, 5))
        left_frame.configure(width=500)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞
        left_frame.pack_propagate(False)

        # –ü–†–ê–í–ê–Ø –ö–û–õ–û–ù–ö–ê - –õ–æ–≥–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
        right_frame = ttk.Frame(main_container, style="Card.TFrame")
        right_frame.pack(side="right", fill="both", expand=True, padx=(5, 0))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å
        self.log_panel = right_frame

        # –°–æ–∑–¥–∞–µ–º Canvas –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤ –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
        canvas = tk.Canvas(left_frame, bg="white", highlightthickness=0)
        scrollbar = ttk.Scrollbar(left_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas, style="Card.TFrame")

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–ª–µ—Å–æ –º—ã—à–∏ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        canvas.bind_all("<MouseWheel>", _on_mousewheel)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –ª–æ–≥–∞–º–∏
        self.setup_log_panel(right_frame)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏
        self.flash_output = []

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π
        title_frame = ttk.Frame(scrollable_frame)
        title_frame.pack(pady=(10, 20), fill="x", padx=20)

        title_label = ttk.Label(
            title_frame,
            text="üåæ AgriSwarm",
            style="Title.TLabel"
        )
        title_label.pack(side="left")

        subtitle_label = ttk.Label(
            title_frame,
            text="ESP32 Firmware Flasher",
            style="Title.TLabel"
        )
        subtitle_label.pack(side="right")

        # –°–µ–∫—Ü–∏—è COM-–ø–æ—Ä—Ç–∞
        com_section = self.create_section(scrollable_frame, "üîå COM-–ø–æ—Ä—Ç", 15)

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ COM-–ø–æ—Ä—Ç–æ–≤
        self.com_var = tk.StringVar(value=self.com_ports[0] if self.com_ports else "COM-–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        com_frame = ttk.Frame(com_section)
        com_frame.pack(fill="x", pady=5, padx=15)

        ttk.Label(
            com_frame,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç:",
            font=("Segoe UI", 10),
            background="white"
        ).pack(anchor="w", pady=(0, 5))

        # –°—Ç–∏–ª—å–Ω—ã–π –∫–æ–º–±–æ-–±–æ–∫—Å
        self.com_combo = ttk.Combobox(
            com_frame,
            textvariable=self.com_var,
            values=self.com_ports,
            state="readonly",
            font=("Segoe UI", 10),
            width=35
        )
        self.com_combo.pack(fill="x", pady=(0, 10))

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_frame = ttk.Frame(com_frame)
        refresh_frame.pack(fill="x")

        refresh_btn = tk.Button(
            refresh_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
            command=self.refresh_com_ports,
            relief="flat",
            bg="#28a745",
            fg="white",
            font=("Segoe UI", 9, "bold"),
            padx=10,
            pady=5,
            cursor="hand2"
        )
        refresh_btn.pack(anchor="w")

        # –°–µ–∫—Ü–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ—à–∏–≤–∫–∏
        file_section = self.create_section(scrollable_frame, "üìÅ –§–∞–π–ª –ø—Ä–æ—à–∏–≤–∫–∏", 15)

        self.file_var = tk.StringVar(value=self.firmware_path)

        file_frame = ttk.Frame(file_section)
        file_frame.pack(fill="x", pady=5, padx=15)

        ttk.Label(
            file_frame,
            text="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:",
            font=("Segoe UI", 10),
            background="white"
        ).pack(anchor="w", pady=(0, 5))

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å —Ä–∞–º–∫–æ–π
        file_entry_frame = ttk.Frame(file_frame)
        file_entry_frame.pack(fill="x", pady=(0, 10))

        file_entry = tk.Entry(
            file_entry_frame,
            textvariable=self.file_var,
            font=("Consolas", 9),
            relief="solid",
            borderwidth=1,
            bg="white"
        )
        file_entry.pack(side="left", fill="x", expand=True, padx=(0, 10))

        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
        browse_btn = tk.Button(
            file_entry_frame,
            text="üìÅ –û–±–∑–æ—Ä",
            command=self.browse_file,
            relief="flat",
            bg="#6c757d",
            fg="white",
            font=("Segoe UI", 9, "bold"),
            padx=12,
            pady=5,
            cursor="hand2"
        )
        browse_btn.pack(side="right", padx=(0, 5))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –∫ —É–º–æ–ª—á–∞–Ω–∏—é
        reset_btn = tk.Button(
            file_entry_frame,
            text="üîÑ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é",
            command=self.reset_to_default,
            relief="flat",
            bg="#17a2b8",
            fg="white",
            font=("Segoe UI", 9, "bold"),
            padx=12,
            pady=5,
            cursor="hand2"
        )
        reset_btn.pack(side="right")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        self.file_info_label = ttk.Label(
            file_section,
            text=self.get_file_info(),
            font=("Segoe UI", 8),
            background="white",
            foreground="#6c757d"
        )
        self.file_info_label.pack(anchor="w", pady=5)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        button_frame = ttk.Frame(scrollable_frame)
        button_frame.pack(pady=20, fill="x", padx=20)

        self.flash_btn = tk.Button(
            button_frame,
            text="üöÄ –ó–ê–ì–†–£–ó–ò–¢–¨ –ü–†–û–®–ò–í–ö–£",
            command=self.flash_firmware,
            relief="flat",
            bg="#007bff",
            fg="white",
            font=("Segoe UI", 14, "bold"),
            padx=30,
            pady=15,
            cursor="hand2",
            state="normal"
        )
        self.flash_btn.pack(fill="x")

        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        status_frame = ttk.Frame(self.root, padding="10")
        status_frame.pack(fill="x", side="bottom")

        self.status_label = ttk.Label(
            status_frame,
            text="‚úÖ –ì–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ",
            style="Status.TLabel"
        )
        self.status_label.pack(side="left")

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (—Å–∫—Ä—ã—Ç—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(
            status_frame,
            variable=self.progress_var,
            maximum=100,
            style="Horizontal.TProgressbar"
        )

        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar.pack_forget()

    def setup_log_panel(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –ª–æ–≥–∞–º–∏"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
        log_title = ttk.Label(
            parent,
            text="üìã –õ–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏",
            style="Section.TLabel",
            font=("Segoe UI", 12, "bold")
        )
        log_title.pack(pady=10, anchor="w", padx=15)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = ttk.Separator(parent, orient="horizontal")
        separator.pack(fill="x", padx=15)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
        self.progress_label = ttk.Label(
            parent,
            text="‚è∏ –ì–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ",
            font=("Segoe UI", 10),
            foreground="#6c757d"
        )
        self.progress_label.pack(pady=(15, 10), anchor="w", padx=15)

        self.progress_var_right = tk.DoubleVar()
        self.progress_bar_right = ttk.Progressbar(
            parent,
            variable=self.progress_var_right,
            maximum=100,
            style="Horizontal.TProgressbar"
        )
        self.progress_bar_right.pack(fill="x", padx=15, pady=(0, 15))

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
        self.log_text = tk.Text(
            parent,
            height=20,
            font=("Consolas", 9),
            bg="#1e1e1e",
            fg="#d4d4d4",
            wrap="word",
            relief="flat",
            borderwidth=1
        )
        self.log_text.pack(fill="both", expand=True, padx=15, pady=(0, 15))

        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è –ª–æ–≥–æ–≤
        log_scrollbar = ttk.Scrollbar(parent, orient="vertical", command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=log_scrollbar.set)
        log_scrollbar.pack(side="right", fill="y", pady=(0, 15))

        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤
        buttons_frame = ttk.Frame(parent)
        buttons_frame.pack(fill="x", padx=15, pady=(0, 15))

        copy_logs_btn = tk.Button(
            buttons_frame,
            text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏",
            command=self.copy_logs,
            relief="flat",
            bg="#6c757d",
            fg="white",
            font=("Segoe UI", 9, "bold"),
            padx=15,
            pady=8,
            cursor="hand2"
        )
        copy_logs_btn.pack(side="left", padx=(0, 10))

        copy_info_btn = tk.Button(
            buttons_frame,
            text="üìÑ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
            command=self.copy_file_info,
            relief="flat",
            bg="#17a2b8",
            fg="white",
            font=("Segoe UI", 9, "bold"),
            padx=15,
            pady=8,
            cursor="hand2"
        )
        copy_info_btn.pack(side="left")

    def add_log(self, message, level="info"):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ —É—Ä–æ–≤–Ω—é
        colors = {
            "info": "#d4d4d4",
            "success": "#4ec9b0",
            "warning": "#ffa500",
            "error": "#f48771"
        }
        color = colors.get(level, "#d4d4d4")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.log_text.insert("end", f"{message}\n")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
        if int(self.log_text.index("end-1c").split('.')[0]) > 100:
            self.log_text.delete("1.0", "2.0")

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        self.log_text.see("end")
        self.root.update()

    def update_progress(self, value, text):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        self.progress_var_right.set(value)
        self.progress_label.config(text=text)

    def copy_logs(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            logs_content = self.log_text.get("1.0", "end-1c")
            if logs_content.strip():
                self.root.clipboard_clear()
                self.root.clipboard_append(logs_content)
                self.status_label.config(text="‚úÖ –õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", foreground="#28a745")
                self.root.after(2000, lambda: self.status_label.config(text="‚úÖ –ì–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ", foreground="#6c757d"))
            else:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–õ–æ–≥–∏ –ø—É—Å—Ç—ã")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏:\n{e}")

    def copy_file_info(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            firmware_file = self.file_var.get()
            if not firmware_file or not os.path.exists(firmware_file):
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–§–∞–π–ª –ø—Ä–æ—à–∏–≤–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω")
                return

            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            com_port = self.com_var.get()
            firmware_dir = os.path.dirname(firmware_file)
            bootloader_file = os.path.join(firmware_dir, "bootloader.bin")
            partitions_file = os.path.join(firmware_dir, "partitions.bin")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
            bootloader_status = "‚úÖ –ù–∞–π–¥–µ–Ω" if os.path.exists(bootloader_file) else "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω"
            bootloader_size = f"{os.path.getsize(bootloader_file) / 1024:.2f} KB" if os.path.exists(bootloader_file) else "N/A"
            
            partitions_status = "‚úÖ –ù–∞–π–¥–µ–Ω" if os.path.exists(partitions_file) else "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω"
            partitions_size = f"{os.path.getsize(partitions_file) / 1024:.2f} KB" if os.path.exists(partitions_file) else "N/A"
            
            info = f"""üåæ AgriSwarm ESP32 Firmware Flasher - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

üìÖ –î–∞—Ç–∞: {self.get_current_timestamp()}
üîå COM-–ø–æ—Ä—Ç: {com_port}

üìÅ –§–ê–ô–õ–´ –ü–†–û–®–ò–í–ö–ò:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üì¶ bootloader.bin: {bootloader_status}
   –ü—É—Ç—å: {bootloader_file}
   –†–∞–∑–º–µ—Ä: {bootloader_size}

üìã partitions.bin: {partitions_status}
   –ü—É—Ç—å: {partitions_file}
   –†–∞–∑–º–µ—Ä: {partitions_size}

üì¶ firmware.bin: ‚úÖ –ù–∞–π–¥–µ–Ω
   –ü—É—Ç—å: {firmware_file}
   –†–∞–∑–º–µ—Ä: {os.path.getsize(firmware_file) / (1024 * 1024):.2f} MB

‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ó–ê–ì–†–£–ó–ö–ò:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: 921600 baud
‚Ä¢ Flash mode: dio
‚Ä¢ Flash frequency: 40m
‚Ä¢ –ß–∏–ø: ESP32
‚Ä¢ –ê–¥—Ä–µ—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏:
  - 0x1000: bootloader.bin
  - 0x8000: partitions.bin
  - 0x10000: firmware.bin

üîß –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–æ–≤
            import time
            if os.path.exists(bootloader_file):
                info += f"\nüì¶ bootloader.bin –∏–∑–º–µ–Ω–µ–Ω: {time.ctime(os.path.getmtime(bootloader_file))}"
            if os.path.exists(partitions_file):
                info += f"\nüìã partitions.bin –∏–∑–º–µ–Ω–µ–Ω: {time.ctime(os.path.getmtime(partitions_file))}"
            
            mtime_firmware = time.ctime(os.path.getmtime(firmware_file))
            info += f"\nüì¶ firmware.bin –∏–∑–º–µ–Ω–µ–Ω: {mtime_firmware}"
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            self.root.clipboard_clear()
            self.root.clipboard_append(info)
            self.status_label.config(text="‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", foreground="#28a745")
            self.root.after(2000, lambda: self.status_label.config(text="‚úÖ –ì–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ", foreground="#6c757d"))
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n{e}")

    def get_current_timestamp(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è"""
        from datetime import datetime
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    def create_section(self, parent, title, pady):
        """–°–æ–∑–¥–∞—Ç—å —Å–µ–∫—Ü–∏—é —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
        section = ttk.Frame(parent)
        section.pack(fill="x", pady=pady, padx=20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        title_label = ttk.Label(
            section,
            text=title,
            style="Section.TLabel"
        )
        title_label.pack(anchor="w", pady=(0, 10))

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        separator = ttk.Separator(section, orient="horizontal")
        separator.pack(fill="x", pady=(0, 5))

        return section
        
    def get_com_ports(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö COM-–ø–æ—Ä—Ç–æ–≤"""
        ports = serial.tools.list_ports.comports()
        com_list = [f"{port.device} - {port.description}" for port in ports]
        return com_list if com_list else ["COM-–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"]

    def get_file_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
        if not self.firmware_path or not os.path.exists(self.firmware_path):
            return "üìÑ –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"

        size = os.path.getsize(self.firmware_path)
        size_mb = size / (1024 * 1024)

        import time
        mtime = time.ctime(os.path.getmtime(self.firmware_path))

        return f"üìä –†–∞–∑–º–µ—Ä: {size_mb:.2f} MB | üìÖ –ò–∑–º–µ–Ω–µ–Ω: {mtime[:10]}"

    def update_file_info(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
        self.file_info_label.config(text=self.get_file_info())

    def refresh_com_ports(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ COM-–ø–æ—Ä—Ç–æ–≤"""
        self.com_ports = self.get_com_ports()
        self.com_combo['values'] = self.com_ports
        self.com_var.set(self.com_ports[0] if self.com_ports else "COM-–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        self.status_label.config(text="üîÑ –°–ø–∏—Å–æ–∫ COM-–ø–æ—Ä—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω", foreground="#28a745")
        self.root.after(2000, lambda: self.status_label.config(text="‚úÖ –ì–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ", foreground="#6c757d"))

    def browse_file(self):
        """–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –ø—Ä–æ—à–∏–≤–∫–∏"""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–æ—à–∏–≤–∫–∏ (.bin)",
            filetypes=[
                ("Binary files", "*.bin"),
                ("All files", "*.*")
            ],
            initialdir=os.path.dirname(self.firmware_path) if self.firmware_path else "."
        )

        if filename:
            self.firmware_path = filename  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å
            self.firmware_base_dir = os.path.dirname(filename)  # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            self.file_var.set(filename)
            self.update_file_info()

    def reset_to_default(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –∫ —Ñ–∞–π–ª–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        firmware_dir = os.path.join(os.path.dirname(__file__), "firmware")
        default_path_firmware = os.path.join(firmware_dir, "firmware.bin")
        default_path_root = os.path.join(os.path.dirname(__file__), "firmware.bin")
        
        if os.path.exists(firmware_dir) and os.path.exists(default_path_firmware):
            self.firmware_path = default_path_firmware
            self.firmware_base_dir = firmware_dir
            self.file_var.set(default_path_firmware)
            self.status_label.config(text="‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–ø–∫–∞ firmware/", foreground="#28a745")
        elif os.path.exists(default_path_root):
            self.firmware_path = default_path_root
            self.firmware_base_dir = os.path.dirname(__file__)
            self.file_var.set(default_path_root)
            self.status_label.config(text="‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞", foreground="#28a745")
        else:
            self.status_label.config(text="‚ùå –§–∞–π–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", foreground="#dc3545")
        
        self.root.after(2000, lambda: self.status_label.config(text="‚úÖ –ì–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ", foreground="#6c757d"))
        self.update_file_info()

    def validate_inputs(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞"""
        com_port = self.com_var.get()
        firmware_file = self.file_var.get()

        if not com_port or "COM" not in com_port:
            messagebox.showerror("–û—à–∏–±–∫–∞", "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω COM-–ø–æ—Ä—Ç!")
            return False

        if not firmware_file or not os.path.exists(firmware_file):
            messagebox.showerror("–û—à–∏–±–∫–∞", "‚ùå –§–∞–π–ª –ø—Ä–æ—à–∏–≤–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False

        if not firmware_file.lower().endswith('.bin'):
            messagebox.showerror("–û—à–∏–±–∫–∞", "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .bin!")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º esptool
        try:
            import esptool
        except ImportError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "‚ùå esptool –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install esptool pyserial")
            return False

        return True

    def show_progress(self, value, text):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç—É—Å"""
        self.progress_var.set(value)
        self.status_label.config(text=text)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å
        self.update_progress(value, text)
        self.root.update()

    def flash_firmware_thread(self, com_port, firmware_file):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º esptool
            try:
                import esptool
                self.show_progress(10, "üîß –ó–∞–ø—É—Å–∫ esptool...")
                self.add_log(f"üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—à–∏–≤–∫–∏", "info")
                self.add_log(f"üìÅ –§–∞–π–ª: {os.path.basename(firmware_file)}", "info")
                self.add_log(f"üîå –ü–æ—Ä—Ç: {com_port}", "info")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å firmware
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ñ–∞–π–ª–∞
                firmware_dir = getattr(self, 'firmware_base_dir', os.path.dirname(firmware_file))
                bootloader_file = os.path.abspath(os.path.join(firmware_dir, "bootloader.bin"))
                partitions_file = os.path.abspath(os.path.join(firmware_dir, "partitions.bin"))
                
                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                self.add_log(f"üîç –ü—É—Ç—å firmware: {firmware_dir}", "info")
                self.add_log(f"üîç Bootloader –ø—É—Ç—å: {bootloader_file}", "info")
                self.add_log(f"üîç Partitions –ø—É—Ç—å: {partitions_file}", "info")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
                files_to_upload = []
                bootloader_exists = os.path.exists(bootloader_file)
                partitions_exists = os.path.exists(partitions_file)
                
                self.add_log(f"üîç Bootloader —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {bootloader_exists}", "info")
                self.add_log(f"üîç Partitions —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {partitions_exists}", "info")
                
                if bootloader_exists:
                    files_to_upload.extend(["0x1000", bootloader_file])
                    self.add_log(f"üì¶ Bootloader: {os.path.basename(bootloader_file)} ‚Üí 0x1000", "info")
                else:
                    self.add_log(f"‚ö†Ô∏è bootloader.bin –Ω–µ –Ω–∞–π–¥–µ–Ω", "warning")
                
                if partitions_exists:
                    files_to_upload.extend(["0x8000", partitions_file])
                    self.add_log(f"üìã Partitions: {os.path.basename(partitions_file)} ‚Üí 0x8000", "info")
                else:
                    self.add_log(f"‚ö†Ô∏è partitions.bin –Ω–µ –Ω–∞–π–¥–µ–Ω", "warning")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å –¥–ª—è firmware
                if bootloader_exists and partitions_exists:
                    # –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: bootloader + partitions + firmware
                    firmware_address = "0x10000"
                    files_to_upload.extend([firmware_address, firmware_file])
                    self.add_log(f"üì¶ Firmware: {os.path.basename(firmware_file)} ‚Üí 0x10000", "info")
                elif bootloader_exists:
                    # –¢–æ–ª—å–∫–æ bootloader: –∑–∞–≥—Ä—É–∂–∞–µ–º firmware –Ω–∞ 0x10000
                    firmware_address = "0x10000"
                    files_to_upload.extend([firmware_address, firmware_file])
                    self.add_log(f"üì¶ Firmware: {os.path.basename(firmware_file)} ‚Üí 0x10000", "info")
                    self.add_log(f"‚ö†Ô∏è Partitions –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º", "warning")
                else:
                    # –ù–µ—Ç bootloader: –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ firmware –Ω–∞ 0x1000
                    firmware_address = "0x1000"
                    files_to_upload = [firmware_address, firmware_file]
                    self.add_log(f"üì¶ Firmware: {os.path.basename(firmware_file)} ‚Üí 0x1000", "info")
                    self.add_log(f"‚ö†Ô∏è Bootloader –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞", "warning")

                # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ platformio.ini
                cmd = [
                    sys.executable, "-m", "esptool",
                    "--chip", "esp32",
                    "--port", com_port,
                    "--baud", "921600",
                    "--before", "default_reset",
                    "--after", "hard_reset",
                    "write_flash",
                    "-z",  # –°–∂–∞—Ç–∏–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
                    "--flash_mode", "dio",
                    "--flash_freq", "40m",
                    "--flash_size", "detect"
                ]
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                cmd.extend(files_to_upload)

                self.show_progress(20, "üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ESP32...")

                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                process = subprocess.Popen(
                    cmd,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.STDOUT,
                    text=True,
                    bufsize=1,
                    universal_newlines=True
                )

                # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                for line in iter(process.stdout.readline, ''):
                    line = line.strip()
                    if line:
                        self.add_log(line, "info")
                        if "Writing at" in line:
                            self.show_progress(30, "üìù –ó–∞–ø–∏—Å—å –ø—Ä–æ—à–∏–≤–∫–∏...")
                        elif "Wrote" in line and "bytes" in line:
                            self.show_progress(80, "üíæ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞...")
                        elif "Hard resetting" in line:
                            self.show_progress(90, "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ ESP32...")

                process.wait()

                if process.returncode == 0:
                    self.show_progress(100, "‚úÖ –ü—Ä–æ—à–∏–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
                    self.add_log("‚úÖ –ü—Ä–æ—à–∏–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!", "success")
                    self.root.after(1000, lambda: messagebox.showinfo(
                        "–£—Å–ø–µ—Ö! üéâ",
                        "–ü—Ä–æ—à–∏–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ ESP32!\n\n"
                        "–ü–ª–∞—Ç–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ."
                    ))
                else:
                    raise Exception("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è esptool")

            except ImportError:
                raise Exception("esptool –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install esptool")

        except Exception as e:
            self.show_progress(0, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            self.add_log(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", "error")
            error_message = str(e)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            self.root.after(1000, lambda err=error_message: messagebox.showerror(
                "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—à–∏–≤–∫—É:\n\n{err}\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                "‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ESP32\n"
                "‚Ä¢ –í—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ COM-–ø–æ—Ä—Ç–∞\n"
                "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫—É esptool (pip install esptool)"
            ))
        finally:
            self.is_flashing = False
            self.flash_btn.config(state="normal", text="üöÄ –ó–ê–ì–†–£–ó–ò–¢–¨ –ü–†–û–®–ò–í–ö–£")
            # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            self.progress_bar.pack_forget()

    def flash_firmware(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ—à–∏–≤–∫–∏"""
        if self.is_flashing:
            return

        if not self.validate_inputs():
            return

        # –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        com_port = self.com_var.get().split(" - ")[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º "COM13" –∏–∑ "COM13 - USB Serial Device"
        firmware_file = self.file_var.get()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(firmware_file):
            messagebox.showerror("–û—à–∏–±–∫–∞", f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:\n{firmware_file}")
            return

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—É—Ç—å –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        firmware_file = os.path.abspath(firmware_file)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        confirm_msg = f"""üåæ AgriSwarm - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏

üìÅ –§–∞–π–ª: {firmware_file}
üìä –†–∞–∑–º–µ—Ä: {os.path.getsize(firmware_file) / 1024 / 1024:.2f} MB
üîå –ü–æ—Ä—Ç: {com_port}

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ESP32 –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
‚Ä¢ –ó–∞–∫—Ä–æ–π—Ç–µ Serial Monitor –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥

–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"""

        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", confirm_msg):
            return

        # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        self.is_flashing = True
        self.flash_btn.config(state="disabled", text="‚è≥ –ó–ê–ì–†–£–ó–ö–ê...")
        self.progress_bar.pack(side="right", fill="x", expand=True, padx=(20, 0))
        self.progress_var.set(0)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        flash_thread = threading.Thread(
            target=self.flash_firmware_thread,
            args=(com_port, firmware_file)
        )
        flash_thread.daemon = True
        flash_thread.start()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    root = tk.Tk()
    app = ModernFlashFirmwareGUI(root)
    root.mainloop()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
    def on_closing():
        if hasattr(app, 'is_flashing') and app.is_flashing:
            if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –ó–∞–∫—Ä—ã—Ç—å?"):
                root.destroy()
        else:
            root.destroy()

    root.protocol("WM_DELETE_WINDOW", on_closing)

if __name__ == "__main__":
    main()

